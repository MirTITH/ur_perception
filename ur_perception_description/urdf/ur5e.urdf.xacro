<?xml version="1.0"?>
<robot xmlns:xacro="http://wiki.ros.org/xacro" name="ur5e">
  <!-- import main macro -->
  <xacro:include filename="$(find ur_description)/urdf/ur_macro.xacro" />

  <!-- possible 'ur_type' values: ur3, ur3e, ur5, ur5e, ur10, ur10e, ur16e, ur20 -->
  <!-- the default value should raise an error in case this was called without defining the type -->
  <xacro:arg name="ur_type" default="ur5e" />

  <!-- parameters -->
  <xacro:arg name="safety_limits" default="false" />
  <xacro:arg name="safety_pos_margin" default="0.15" />
  <xacro:arg name="safety_k_position" default="20" />
  <!-- ros2_control related parameters -->
  <xacro:arg name="robot_ip" default="0.0.0.0" />
  <xacro:arg name="reverse_ip" default="0.0.0.0" />

  <!-- Simulation parameters -->
  <xacro:arg name="use_fake_hardware" default="false" />
  <xacro:arg name="fake_sensor_commands" default="false" />
  <xacro:arg name="sim_gazebo" default="false" />
  <xacro:arg name="sim_ignition" default="false" />
  <xacro:arg name="simulation_controllers" default="" />

  <!-- initial position for simulations (Fake Hardware, Gazebo, Ignition) -->
  <xacro:arg name="initial_positions_file"
    default="$(find ur_perception_description)/config/initial_positions.yaml" />

  <!-- convert to property to use substitution in function -->
  <xacro:property name="initial_positions_file" default="$(arg initial_positions_file)" />

  <!-- arm -->
  <xacro:ur_robot
    name="ur"
    tf_prefix=""
    parent="$(arg ur_parent)"
    joint_limits_parameters_file="$(find ur_description)/config/$(arg ur_type)/joint_limits.yaml"
    kinematics_parameters_file="$(find ur_description)/config/$(arg ur_type)/default_kinematics.yaml"
    physical_parameters_file="$(find ur_description)/config/$(arg ur_type)/physical_parameters.yaml"
    visual_parameters_file="$(find ur_description)/config/$(arg ur_type)/visual_parameters.yaml"
    transmission_hw_interface=""
    safety_limits="$(arg safety_limits)"
    safety_pos_margin="$(arg safety_pos_margin)"
    safety_k_position="$(arg safety_k_position)"
    use_fake_hardware="$(arg use_fake_hardware)"
    fake_sensor_commands="$(arg fake_sensor_commands)"
    sim_gazebo="$(arg sim_gazebo)"
    sim_ignition="$(arg sim_ignition)"
    headless_mode="false"
    initial_positions="${xacro.load_yaml(initial_positions_file)}"
    use_tool_communication="false"
    tool_voltage="0"
    tool_parity="0"
    tool_baud_rate="115200"
    tool_stop_bits="1"
    tool_rx_idle_chars="1.5"
    tool_tx_idle_chars="3.5"
    tool_device_name="/tmp/ttyUR"
    tool_tcp_port="54321"
    robot_ip="$(arg robot_ip)"
    script_filename=""
    output_recipe_filename=""
    input_recipe_filename=""
    reverse_ip="$(arg reverse_ip)"
    script_command_port="50004"
    reverse_port="50001"
    script_sender_port="50002"
    trajectory_port="50003"
  >
    <origin xyz="0 0 0" rpy="0 0 0" />          <!-- position robot in the world -->
  </xacro:ur_robot>

  <xacro:if value="$(arg sim_gazebo)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>$(arg simulation_controllers)</parameters>
      </plugin>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg sim_ignition)">
    <!-- Gazebo plugins -->
    <gazebo reference="world">
    </gazebo>
    <gazebo>
      <plugin filename="libign_ros2_control-system.so"
        name="ign_ros2_control::IgnitionROS2ControlPlugin">
        <parameters>$(arg simulation_controllers)</parameters>
        <controller_manager_node_name>$(arg tf_prefix)controller_manager</controller_manager_node_name>
      </plugin>
    </gazebo>
  </xacro:if>

</robot>